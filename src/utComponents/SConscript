import sys
import os.path

have_utvision = False

Import( '*' )


# HOW TO BUILD (A) LIBRAR-Y/IES FROM A MODULE
# Building libraries from modules should be consistent for each module.
# Use the following scheme for each new library created:
#
# a) Define the src-subdirectories for which the library should be compiled
#    and glob all files in there
# b) Define a [LIBRARY]_options variable for the library containing all dependencies
#    from other libraries. Create a clone from the master environment and add those options.
# c) WINDOWS ONLY: Create a header file which implements dll interface functionality
#    dependent from a [LIBRARY]_DLL define. If the define is set, the dll should be exported,
#    if not, the dll should be imported. Set the define in the preprocessor options for the environment.
# d) Build the library!
# e) Remove all entries for (at least) the LIBS and LIBPATH keys in the options and
#    add only the newly-compiled library as a dependcy. This will avoid multiple includes
#    of libraries. Also verify that the import/export-switch define is not set.
# f) Export the options so that other libraries can base on this library.
#
# The use of options and possibility to export them makes hierarchical build environments
# obsolete. Avoid exporting new environments to the build system.


# a)
env = masterEnv.Clone()

headers = globSourceFiles( '*.h' )
sources = globSourceFiles( '*.cpp' )

if not have_utvision:
	print "Not compiling ApplicationEndpointsVision components due to missing utVision."
	sources.remove( 'ApplicationEndpointsVision.cpp' );

# b)	
# setup compiler and linker flags

# Merge all options in one "ubitrack" option. Note that some options might be empty if its module is not available	
#utapplication_options = mergeOptions( utfacade_options )
# Set ubitrack root source path explicitly that allows sources to access header files relative with #include <..> statements
utapplication_options = mergeOptions( utfacade_all_options )
utapplication_options ['CPPPATH'] += [  os.path.join( getCurrentPath(), '../') ]
env.AppendUnique( **utapplication_options )
env.Replace( no_import_lib = 1 )
# c)
#if sys.platform == 'win32':
	# On windows this statement will help the compiler to realize that it has to _export_ the library instead of importing it
#	env.Append( CPPDEFINES = 'UBITRACK_DLL' )

# d)	
libs = setupComponentBuild(env, sources, 'facade')

# e)
# clear all 3rd-party dependencies in the case of linking against ubitrack.dll
utapplication_options[ 'LIBS' ] = []
utapplication_options[ 'LIBPATH' ] = []
# add the ubitrack library to the link options.

utapplication_options[ 'LIBS' ] += libs
utapplication_options[ 'LIBPATH' ] += [ install_library_prefix ]

# f)

# also create a visual studio project for the library	
createVisualStudioProject(env, sources, headers, 'utFacade-Components')

# return compile status
success = libs
Return ('success')

